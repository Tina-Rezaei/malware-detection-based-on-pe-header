from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_validate
from sklearn import svm
import time
import random
import numpy as np
import click

normal_section_names = ['.text', '.rdata', '.data', '.pdata', '.rsrc', '.idata', '.bss', '.code', '.edata']
X = []
Y = []


def load_features(feature_file_path, label):
    feature_file = open(feature_file_path,'r')
    feature_file = feature_file.readlines()
    for row in feature_file:
        final_features = []
        Y.append([float(label)])
        features = row.strip('\n').split(',')
        for feature in features[0:-1]:
            final_features.append(float(feature))
        X.append(final_features)
    return X,Y

def learning(X, Y):

    print(len(X))
    print(len(Y))

    for x in Y:
        if len(x) != 1:
            print("yessss")

    algorithms = {
        "RandomForest": RandomForestClassifier(),
        "SVM": svm.SVC(),
        "Knn": KNeighborsClassifier(n_neighbors=5),
    }

    for algo in algorithms:
        print('{} results'.format(algo))
        start_time = time.time()
        clf = algorithms[algo]
        scores = cross_validate(clf, X, Y, cv=10, scoring=('accuracy', 'f1', 'recall', 'precision'))
        for score_name in ['test_accuracy', 'test_precision', 'test_recall', 'test_f1']:
            print('{} : {}'.format(score_name, np.mean(scores[score_name])))
        end_time = time.time()
        execution_time = end_time - start_time
        print('{} execution time {} \n'.format(algo, execution_time))


@click.command()
@click.option('--malware_features_path', required=True, help="path of stored feature for malware samples ")
@click.option('--benign_features_path', required=True, help="path of stored feature for benign samples ")
def main(malware_features_path, benign_features_path):

    X, Y =load_features(malware_features_path,1)
    X, Y =load_features(benign_features_path,0)

    features_label = list(zip(X, Y))
    random.shuffle(features_label)
    X, Y = zip(*features_label)

    
    X_temp = []
    Y_temp = []
    try:
        for i in range(len(X)):
            if len(X[i]) == 9:
               X_temp.append(X[i])
               Y_temp.append(Y[i])
    except:
        print("")

    learning(X_temp,Y_temp)

if __name__ == '__main__':
    main()